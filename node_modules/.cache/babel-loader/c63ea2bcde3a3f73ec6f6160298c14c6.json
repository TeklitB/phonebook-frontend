{"ast":null,"code":"var _jsxFileName = \"/home/techb/Full-stack-open-2020/part3/phonebook-frontend/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Persons from './components/Persons';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport SinglePerson from './components/SinglePerson';\nimport bookServices from './services/book';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [searchName, setSearchName] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  useEffect(() => {\n    bookServices.getAll().then(initialNotes => {\n      setPersons(initialNotes);\n    });\n  }, []);\n\n  const addName = event => {\n    event.preventDefault(); // const found = persons.find(person => person.name === newName)\n    // const foundPerson = persons.find(person => person.name === newName)\n    // if (found) {\n    //     const id = foundPerson.id\n    //     if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n    //         const changeNumber = { ...foundPerson, number: newNumber }\n    //         bookServices\n    //             .update(id, changeNumber)\n    //             .then(retNumber => {\n    //                 setPersons(persons.map(person => person.name !== newName ? person : retNumber))\n    //                 setSuccessMessage(\n    //                     `${newName}'s number updated.`\n    //                 )\n    //                 setTimeout(() => {\n    //                     setSuccessMessage(null)\n    //                 }, 5000)\n    //                 setNewName('')\n    //                 setNewNumber('')\n    //             })\n    //             .catch(error => {\n    //                 console.log(error)\n    //                 setErrorMessage(\n    //                     `Information of '${newName}' has already been removed from server`\n    //                 )\n    //                 setTimeout(() => {\n    //                     setErrorMessage('')\n    //                 }, 5000)\n    //                 setPersons(persons.filter(n => n.id !== id))\n    //                 setNewName('')\n    //                 setNewNumber('')\n    //             })\n    //     }\n    // } else {\n\n    const nameObject = {\n      name: newName,\n      number: newNumber\n    };\n    bookServices.create(nameObject).then(returnedName => {\n      setPersons(persons.concat(returnedName));\n      setSuccessMessage(`Added '${newName}'`);\n      setTimeout(() => {\n        setSuccessMessage('');\n      }, 5000);\n      setNewName('');\n      setNewNumber('');\n    }); //}\n  };\n\n  const handleNewName = event => {\n    //console.log(event.target.value)\n    setNewName(event.target.value);\n  };\n\n  const handleNewNumber = event => {\n    //console.log(event.target.value)\n    setNewNumber(event.target.value);\n  };\n\n  const deleteContact = id => {\n    const deletePerson = persons.find(n => n.id === id);\n\n    if (window.confirm(`Delete '${deletePerson.name}'?`)) {\n      bookServices.deleteP(id).then(returnedPerson => {\n        setPersons(persons.filter(person => person.id !== id)); //console.log(returnedPerson)\n      }).catch(error => {\n        alert(` '${deletePerson.name}' was already deleted`);\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, \"Phonebook\"), /*#__PURE__*/React.createElement(Notification, {\n    successMessage: successMessage,\n    message: errorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Filter, {\n    searchName: searchName,\n    setSearchName: setSearchName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SinglePerson, {\n    searchName: searchName,\n    persons: persons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, \"Add a new\"), /*#__PURE__*/React.createElement(PersonForm, {\n    newName: newName,\n    handleNewName: handleNewName,\n    newNumber: newNumber,\n    handleNewNumber: handleNewNumber,\n    addName: addName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, \"Numbers\"), persons.map(person => /*#__PURE__*/React.createElement(Persons, {\n    key: person.name,\n    person: person,\n    deleteContact: () => deleteContact(person.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 36\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/techb/Full-stack-open-2020/part3/phonebook-frontend/src/App.js"],"names":["React","useState","useEffect","Persons","Filter","PersonForm","SinglePerson","bookServices","Notification","App","persons","setPersons","newName","setNewName","newNumber","setNewNumber","searchName","setSearchName","successMessage","setSuccessMessage","errorMessage","setErrorMessage","getAll","then","initialNotes","addName","event","preventDefault","nameObject","name","number","create","returnedName","concat","setTimeout","handleNewName","target","value","handleNewNumber","deleteContact","id","deletePerson","find","n","window","confirm","deleteP","returnedPerson","filter","person","catch","error","alert","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport SinglePerson from './components/SinglePerson'\nimport bookServices from './services/book'\nimport Notification from './components/Notification'\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [searchName, setSearchName] = useState('')\n    const [successMessage, setSuccessMessage] = useState('')\n    const [errorMessage, setErrorMessage] = useState('')\n\n    useEffect(() => {\n        bookServices\n            .getAll()\n            .then(initialNotes => {\n                setPersons(initialNotes)\n            })\n    }, [])\n\n    const addName = (event) => {\n        event.preventDefault();\n\n        // const found = persons.find(person => person.name === newName)\n        // const foundPerson = persons.find(person => person.name === newName)\n\n        // if (found) {\n        //     const id = foundPerson.id\n        //     if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        //         const changeNumber = { ...foundPerson, number: newNumber }\n        //         bookServices\n        //             .update(id, changeNumber)\n        //             .then(retNumber => {\n        //                 setPersons(persons.map(person => person.name !== newName ? person : retNumber))\n        //                 setSuccessMessage(\n        //                     `${newName}'s number updated.`\n        //                 )\n        //                 setTimeout(() => {\n        //                     setSuccessMessage(null)\n        //                 }, 5000)\n        //                 setNewName('')\n        //                 setNewNumber('')\n        //             })\n        //             .catch(error => {\n        //                 console.log(error)\n        //                 setErrorMessage(\n        //                     `Information of '${newName}' has already been removed from server`\n        //                 )\n        //                 setTimeout(() => {\n        //                     setErrorMessage('')\n        //                 }, 5000)\n        //                 setPersons(persons.filter(n => n.id !== id))\n        //                 setNewName('')\n        //                 setNewNumber('')\n        //             })\n        //     }\n\n        // } else {\n\n            const nameObject = {\n                name: newName,\n                number: newNumber\n            }\n            bookServices\n                .create(nameObject)\n                .then(returnedName => {\n                    setPersons(persons.concat(returnedName))\n                    setSuccessMessage(\n                        `Added '${newName}'`\n                    )\n                    setTimeout(() => {\n                        setSuccessMessage('')\n                    }, 5000)\n                    setNewName('')\n                    setNewNumber('')\n                })\n        //}\n    }\n    const handleNewName = (event) => {\n        //console.log(event.target.value)\n        setNewName(event.target.value)\n    }\n\n    const handleNewNumber = (event) => {\n        //console.log(event.target.value)\n        setNewNumber(event.target.value)\n    }\n\n    const deleteContact = id => {\n        const deletePerson = persons.find(n => n.id === id)\n\n        if (window.confirm(`Delete '${deletePerson.name}'?`)) {\n            bookServices\n                .deleteP(id)\n                .then(returnedPerson => {\n                    setPersons(persons.filter(person => person.id !== id))\n                    //console.log(returnedPerson)\n                })\n                .catch(error => {\n                    alert(\n                        ` '${deletePerson.name}' was already deleted`\n                    )\n                })\n        }\n    }\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification successMessage={successMessage} message={errorMessage} />\n            <Filter searchName={searchName} setSearchName={setSearchName} />\n            <SinglePerson searchName={searchName} persons={persons} />\n            <h2>Add a new</h2>\n            <PersonForm newName={newName} handleNewName={handleNewName}\n                newNumber={newNumber} handleNewNumber={handleNewNumber}\n                addName={addName}\n            />\n            <h2>Numbers</h2>\n            {persons.map(person => <Persons key={person.name} person={person}\n                deleteContact={() => deleteContact(person.id)} />\n            )}\n        </div>\n    )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}